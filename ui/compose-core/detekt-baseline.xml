<?xml version="1.0" ?>
<SmellBaseline>
  <ManuallySuppressedIssues/>
  <CurrentIssues>
    <ID>LongParameterList:Chips.kt$( selected: Boolean, crossinline onClick: () -&gt; Unit, label: String, modifier: Modifier = Modifier, enabled: Boolean = true, leadingIcon: ImageVector? = null, trailingIcon: ImageVector? = null )</ID>
    <ID>LongParameterList:Components.kt$( title: @Composable (() -&gt; Unit)?, confirmButton: @Composable () -&gt; Unit, dismissButton: @Composable (() -&gt; Unit)?, onDismissRequest: () -&gt; Unit, dismissOnBackPress: Boolean = true, dismissOnClickOutside: Boolean = true, securePolicy: SecureFlagPolicy = SecureFlagPolicy.Inherit, content: @Composable (() -&gt; Unit) )</ID>
    <ID>LongParameterList:Components.kt$( title: String = "TEST FIELD DIALOG", onDismissRequest: () -&gt; Unit = {}, onConfirmRequest: () -&gt; Unit = {}, isConfirmButtonEnabled: Boolean = true, buttonBar: @Composable () -&gt; Unit = DialogDefaults.newButtonBar( onConfirmClick = onConfirmRequest, onDismissClick = onDismissRequest, isConfirmButtonEnabled = isConfirmButtonEnabled ), content: @Composable () -&gt; Unit, )</ID>
    <ID>LongParameterList:Components.kt$DialogDefaults$( onConfirmClick: () -&gt; Unit, onDismissClick: () -&gt; Unit, isConfirmButtonEnabled: Boolean = false, confirmText: String = stringResource(id = android.R.string.ok), confirmIcon: ImageVector = Icons.Default.Done, dismissText: String = stringResource(id = android.R.string.cancel), dismissIcon: ImageVector = Icons.Default.Close )</ID>
    <ID>LongParameterList:DialogsCore.kt$DialogsCore$( title: String?, text: String, confirmText: String = stringResource(id = android.R.string.ok), dismissText: String? = stringResource(id = android.R.string.cancel), dismissOnButtonClick: Boolean = true, dismissOnOutsideClick: Boolean = true, onDismissRequest: (() -&gt; Unit)? = null, onDismissClick: (() -&gt; Unit)? = null, onConfirmClick: () -&gt; Unit = {} )</ID>
    <ID>LongParameterList:ListItems.kt$( modifier: Modifier = Modifier, titleText: String = "Some title here", leadingContent: (@Composable () -&gt; Unit)? = null, trailingContent: (@Composable () -&gt; Unit)? = null, longClickCallback: (() -&gt; Unit)? = null, onClick: (() -&gt; Unit)? = {} )</ID>
    <ID>LongParameterList:ListItems.kt$( modifier: Modifier = Modifier, titleText: String = "Some title here", summaryText: String = "Some summary here", leadingContent: @Composable (() -&gt; Unit)? = null, trailingContent: @Composable (() -&gt; Unit)? = null, longClickCallback: (() -&gt; Unit)? = null, onClick: (() -&gt; Unit)? = null )</ID>
    <ID>LongParameterList:ListItems.kt$( modifier: Modifier = Modifier, titleText: String = "Some title here", summaryText: String? = null, leadingContent: @Composable (() -&gt; Unit)? = null, trailingContent: @Composable (() -&gt; Unit)? = null, longClickCallback: (() -&gt; Unit)? = null, onClick: (() -&gt; Unit)? = null )</ID>
    <ID>LongParameterList:NoItemsPage.kt$( modifier: Modifier = Modifier, mainIcon: ImageVector = Icons.Outlined.FolderOpen, actionIcon: ImageVector = Icons.Default.Add, pageSize: NoItemsPageSize = NoItemsPageSize.FULL, title: String = "No items", summary: String = "empty" )</ID>
    <ID>LongParameterList:Preferences.kt$( modifier: Modifier = Modifier, titleText: String, summaryText: String? = null, leadingContent: @Composable (() -&gt; Unit)? = null, trailingContent: @Composable (() -&gt; Unit)? = null, callback: () -&gt; Unit )</ID>
    <ID>LongParameterList:Sheets.kt$( onDismissRequest: (() -&gt; Unit)? = null, state: MutableState&lt;Boolean&gt; = Compose.state(), sheetState: SheetState, modifier: Modifier = Modifier, shape: Shape = BottomSheetDefaults.ExpandedShape, containerColor: Color = BottomSheetDefaults.ContainerColor, contentColor: Color = contentColorFor(containerColor), tonalElevation: Dp = BottomSheetDefaults.Elevation, scrimColor: Color = BottomSheetDefaults.ScrimColor, dragHandle: @Composable (() -&gt; Unit)? = { BottomSheetDefaults.DragHandle() }, content: @Composable (ColumnScope.() -&gt; Unit) )</ID>
    <ID>MagicNumber:RecomposeHighlighter.kt$10000</ID>
    <ID>MagicNumber:RecomposeHighlighter.kt$100f</ID>
    <ID>MagicNumber:Shimmer.kt$500</ID>
    <ID>MagicNumber:TwoPanelLayout.kt$0.5f</ID>
    <ID>MatchingDeclarationName:Components.kt$SheetDefaults</ID>
    <ID>PackageName:KeyboardOptions.kt$package io.gromif.ui.compose.core.text_fields</ID>
    <ID>PackageName:PasswordToggleIconButton.kt$package io.gromif.ui.compose.core.text_fields.icons</ID>
    <ID>PackageNaming:KeyboardOptions.kt$package io.gromif.ui.compose.core.text_fields</ID>
    <ID>PackageNaming:PasswordToggleIconButton.kt$package io.gromif.ui.compose.core.text_fields.icons</ID>
    <ID>TopLevelPropertyNaming:KeyboardOptions.kt$@Stable val _keyboardOptionsPassword = KeyboardOptions.Default.copy( autoCorrectEnabled = false, keyboardType = KeyboardType.Password )</ID>
    <ID>UnusedParameter:Buttons.kt$contentDescription: String? = null</ID>
    <ID>UnusedPrivateMember:Cards.kt$@Preview @Composable private fun InfoTitleCardPreview()</ID>
  </CurrentIssues>
</SmellBaseline>
